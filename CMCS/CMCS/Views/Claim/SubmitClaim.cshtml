@model CMCS.Models.Claim

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@(ViewBag.IsSuccess == true ? "Claim Submitted - CMCS" : "Submit Claim - CMCS")</title>
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <style>
        body {
            background-color: #3e2723; /* Brown background */
            color: #fff; /* White text color */
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
        }

        .container {
            background-color: #fff; /* White background for content */
            color: #3e2723; /* Brown text color */
            border-radius: 8px; /* Rounded corners */
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1); /* Subtle shadow */
            padding: 20px;
            max-width: 800px;
            margin: 20px auto;
            border: none; /* Remove border */
        }

        .form-label {
            color: #3e2723; /* Brown label color */
        }

        .form-control {
            border-color: #3e2723; /* Brown border for input fields */
        }

        .btn-primary {
            background-color: #3e2723; /* Brown button background */
            border-color: #3e2723; /* Brown button border */
            color: #fff; /* White text */
        }

            .btn-primary:hover {
                background-color: #2c1b19; /* Darker brown on hover */
                border-color: #2c1b19; /* Darker brown border on hover */
            }

        .btn-secondary {
            background-color: #000; /* Black button background */
            border-color: #000; /* Black button border */
            color: #fff; /* White text */
        }

            .btn-secondary:hover {
                background-color: #333; /* Darker black on hover */
                border-color: #333; /* Darker black border on hover */
            }

        .text-danger {
            color: #dc3545; /* Red color for validation messages */
        }

        .text-center {
            text-align: center;
        }

        .mb-3 {
            margin-bottom: 1rem;
        }
    </style>
</head>
<body>
    <div class="container mt-5">
        @if (ViewBag.IsSuccess == true)
        {
            <h2 class="text-center">Claim Submitted Successfully</h2>
            <p class="text-center">Your claim has been submitted successfully. Thank you!</p>
            <div class="text-center">
                <a href="@Url.Action("SubmitClaim", "Claim")" class="btn btn-primary">Submit Another Claim</a>
                <a href="@Url.Action("ViewClaims", "Claim")" class="btn btn-secondary">Back to Claims</a>
            </div>
        }
        else
        {
            <h2 class="text-center">Submit Claim</h2>
            @using (Html.BeginForm("SubmitClaim", "Claim", FormMethod.Post, new { enctype = "multipart/form-data" }))
            {
                <div class="mb-3">
                    @Html.Label("Name", "Name", new { @class = "form-label" }) <!-- Updated -->
                    @Html.TextBox("Name", null, new { @class = "form-control", placeholder = "Enter your name" })
                </div>

                <div class="mb-3">
                    @Html.Label("Surname", "Surname", new { @class = "form-label" }) <!-- Updated -->
                    @Html.TextBox("Surname", null, new { @class = "form-control", placeholder = "Enter your surname" })
                </div>

                <div class="mb-3">
                    @Html.Label("Module", "Module", new { @class = "form-label" }) <!-- Updated -->
                    @Html.TextBox("Module", null, new { @class = "form-control", placeholder = "Enter your module" })
                </div>

                <div class="mb-3">
                    @Html.LabelFor(m => m.HoursWorked, "Hours Worked", new { @class = "form-label" })
                    @Html.TextBoxFor(m => m.HoursWorked, new { @class = "form-control", id = "hoursWorked" })
                    @Html.ValidationMessageFor(m => m.HoursWorked, "", new { @class = "text-danger" })
                </div>

                <div class="mb-3">
                    @Html.LabelFor(m => m.HourlyRate, "Hourly Rate", new { @class = "form-label" })
                    @Html.TextBoxFor(m => m.HourlyRate, new { @class = "form-control", id = "hourlyRate" })
                    @Html.ValidationMessageFor(m => m.HourlyRate, "", new { @class = "text-danger" })
                </div>

                <div class="mb-3">
                    @Html.LabelFor(m => m.TotalAmount, "Total Amount (R)", new { @class = "form-label" })
                    @Html.TextBoxFor(m => m.TotalAmount, new { @class = "form-control", id = "totalAmount", @readonly = "readonly" })
                    @Html.ValidationMessageFor(m => m.TotalAmount, "", new { @class = "text-danger" })
                </div>

                <div class="mb-3">
                    @Html.LabelFor(m => m.SupportingDocument, "Supporting Document", new { @class = "form-label" })
                    <input type="file" name="SupportingDocument" class="form-control" id="SupportingDocument" accept=".pdf" />
                    <span id="fileError" class="text-danger"></span> <!-- For displaying error messages -->
                    @Html.ValidationMessageFor(m => m.SupportingDocument, "", new { @class = "text-danger" })
                </div>

                <button type="submit" class="btn btn-primary">Submit Claim</button>
                <button type="reset" class="btn btn-secondary">Reset</button>
            }
        }
    </div>

    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            // Get references to the input elements
            var hoursWorkedInput = document.getElementById("hoursWorked");
            var hourlyRateInput = document.getElementById("hourlyRate");
            var totalAmountInput = document.getElementById("totalAmount");
            var fileInput = document.getElementById("SupportingDocument");
            var fileError = document.getElementById("fileError");
            const maxFileSize = 2 * 1024 * 1024; // 2MB in bytes
            const allowedExtension = /(\.pdf)$/i; // Regular expression for PDF

            // Function to calculate total amount
            function calculateTotalAmount() {
                var hoursWorked = parseFloat(hoursWorkedInput.value) || 0;
                var hourlyRate = parseFloat(hourlyRateInput.value) || 0;
                var totalAmount = hoursWorked * hourlyRate;
                totalAmountInput.value = totalAmount.toFixed(2); // Format to 2 decimal places
            }

            // Attach event listeners to input fields
            hoursWorkedInput.addEventListener("input", calculateTotalAmount);
            hourlyRateInput.addEventListener("input", calculateTotalAmount);

            // Validate file input
            fileInput.addEventListener("change", function () {
                fileError.textContent = ''; // Clear previous error messages

                if (fileInput.files.length > 0) {
                    const file = fileInput.files[0];

                    // Check file type
                    if (!allowedExtension.exec(fileInput.value)) {
                        fileError.textContent = 'Only PDF files are allowed.';
                        fileInput.value = ''; // Clear the input
                        return;
                    }

                    // Check file size
                    if (file.size > maxFileSize) {
                        fileError.textContent = 'File size must not exceed 2MB.';
                        fileInput.value = ''; // Clear the input
                        return;
                    }
                }
            });
        });
    </script>
</body>
</html>
